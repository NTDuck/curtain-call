@startuml

hide footbox
skinparam BackgroundColor transparent

actor Guest
actor Listener
boundary GuestHomeView
boundary LoginView
boundary ListenerHomeView
participant LoginController
control LoginInteractor <<InputBoundary>>
participant UserCredentialsVerifier <<Gateway>>
participant ListenerRepository <<Gateway>>
participant PasswordEncoder <<Gateway>>
participant AuthTokenGenerator <<Gateway>>
participant AuthTokenRepository <<Gateway>>
participant LoginPresenter <<OutputBoundary>>

Guest -> GuestHomeView: click on login button
activate Guest
activate GuestHomeView

GuestHomeView -> LoginView: redirect
deactivate GuestHomeView
activate LoginView

Guest -> LoginView: enter credentials
Guest -> LoginView: click on submit button
LoginView -> LoginController: pass RequestObject\n(credentials)
activate LoginController

LoginController ->> LoginInteractor: repackage & pass RequestModel\n(credentials)
deactivate LoginController
activate LoginInteractor
    
alt OK
    LoginInteractor -> UserCredentialsVerifier: check if credentials are in correct format\n(credentials)
    activate UserCredentialsVerifier
    return true
    deactivate UserCredentialsVerifier

    LoginInteractor -> ListenerRepository: get Listener by username\n(credentials.username)
    activate ListenerRepository
    return Some(listener)
    deactivate ListenerRepository

    LoginInteractor -> PasswordEncoder: check if Listener's password matches provided password\n(listener.credentials.password, credentials.password)
    activate PasswordEncoder
    return true
    deactivate PasswordEncoder

    LoginInteractor -> AuthTokenGenerator: generate authentication token for Listener
    activate AuthTokenGenerator
    return authToken
    deactivate AuthTokenGenerator

    LoginInteractor ->> LoginPresenter: pass ResponseModel\n(Ok(authToken))
    deactivate LoginInteractor
    activate LoginPresenter

    LoginPresenter ->> AuthTokenRepository: store authentication token\n(authToken)

    LoginPresenter ->> ListenerHomeView: update the ViewModel\n(Ok())
    deactivate LoginPresenter
    activate ListenerHomeView

    ListenerHomeView -> Listener: see the result of the interaction
    activate Listener

    deactivate Listener
    deactivate ListenerHomeView
    newpage

else Error: Listener credentials in incorrect format
    LoginInteractor -> UserCredentialsVerifier: check if credentials are in correct format\n(credentials)
    activate UserCredentialsVerifier
    return false
    deactivate UserCredentialsVerifier

    LoginInteractor ->> LoginPresenter: pass ResponseModel\n(Err(CredentialsMalformed))
    deactivate LoginInteractor
    activate LoginPresenter

    LoginPresenter ->> LoginView: update the ViewModel\n(Err(CredentialsMalformed))
    deactivate LoginPresenter
    
    LoginView -> Guest: see the result of the interaction

else Error: Listener does not exist
    LoginInteractor -> UserCredentialsVerifier: check if credentials are in correct format\n(credentials)
    activate UserCredentialsVerifier
    return true
    deactivate UserCredentialsVerifier

    LoginInteractor -> ListenerRepository: get Listener by username\n(credentials.username)
    activate ListenerRepository
    return None
    deactivate ListenerRepository

    LoginInteractor ->> LoginPresenter: pass ResponseModel\n(Err(CredentialsInvalid))
    deactivate LoginInteractor
    activate LoginPresenter

    LoginPresenter ->> LoginView: update the ViewModel\n(Err(CredentialsInvalid))
    deactivate LoginPresenter

    LoginView -> Guest: see the result of the interaction

else Error: Password does not match
    LoginInteractor -> UserCredentialsVerifier: check if credentials are in correct format\n(credentials)
    activate UserCredentialsVerifier
    return true
    deactivate UserCredentialsVerifier

    LoginInteractor -> ListenerRepository: get Listener by username\n(credentials.username)
    activate ListenerRepository
    return Some(listener)
    deactivate ListenerRepository

    LoginInteractor -> PasswordEncoder: check if Listener's password matches provided password\n(listener.credentials.password, credentials.password)
    activate PasswordEncoder
    return false
    deactivate PasswordEncoder

    LoginInteractor ->> LoginPresenter: pass ResponseModel\n(Err(CredentialsInvalid))
    deactivate LoginInteractor
    activate LoginPresenter

    LoginPresenter ->> LoginView: update the ViewModel\n(Err(CredentialsInvalid))
    deactivate LoginPresenter

    LoginView -> Guest: see the result of the interaction

end

deactivate Guest
deactivate LoginView

@enduml
