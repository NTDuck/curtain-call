@startuml

hide footbox
skinparam BackgroundColor transparent

actor "Guest/Listener"
boundary PlaylistLinkView
boundary PlaylistView
boundary LoginView
participant ViewPlaylistController
control ViewPlaylistInteractor <<InputBoundary>>
participant AuthTokenRepository <<Gateway>>
participant AuthTokenGenerator <<Gateway>>
participant PlaylistRepository <<Gateway>>
entity Playlist <<Entity>>
participant ViewPlaylistPresenter <<OutputBoundary>>

"Guest/Listener" -> PlaylistLinkView: click on navigatable element
activate "Guest/Listener"
activate PlaylistLinkView

PlaylistLinkView -> PlaylistView: redirect
deactivate PlaylistLinkView
activate PlaylistView

PlaylistView -> ViewPlaylistController: pass RequestObject\n(playlistId)
activate ViewPlaylistController
    
alt OK
    ViewPlaylistController -> AuthTokenRepository: get authentication token
    activate AuthTokenRepository
    return Some(authToken)
    deactivate AuthTokenRepository

    ViewPlaylistController -> ViewPlaylistInteractor: repackage & pass RequestModel\n(authToken, playlistId)
    deactivate ViewPlaylistController
    activate ViewPlaylistInteractor

    ViewPlaylistInteractor -> AuthTokenGenerator: verify authentication token
    activate AuthTokenGenerator
    return true
    deactivate AuthTokenGenerator

    par
    ViewPlaylistInteractor -> PlaylistRepository: get Playlist by ID\n(playlistId)
    activate PlaylistRepository
    return Some(playlist)
    activate Playlist
    deactivate PlaylistRepository

    else
    ViewPlaylistInteractor -> AuthTokenGenerator: get Listener ID from authentication token
    activate AuthTokenGenerator
    return listenerId
    deactivate AuthTokenGenerator

    end

    ViewPlaylistInteractor -> Playlist: check if Playlist is visible to Listener\n(listenerId)
    return true

    ViewPlaylistInteractor ->> ViewPlaylistPresenter: pass ResponseModel\n(Ok(playlist))
    deactivate ViewPlaylistInteractor
    deactivate Playlist
    activate ViewPlaylistPresenter

    ViewPlaylistPresenter ->> PlaylistView: repackage & update ViewModel\n(Ok())
    deactivate ViewPlaylistPresenter

    PlaylistView -> "Guest/Listener": see the result of the interaction
    deactivate PlaylistView
    deactivate "Guest/Listener"
    
    newpage

else Error: Authentication token not found
    ViewPlaylistController -> AuthTokenRepository: get authentication token
    activate ViewPlaylistController
    activate "Guest/Listener"
    activate PlaylistView
    activate AuthTokenRepository
    return None
    deactivate AuthTokenRepository

    ViewPlaylistController -> LoginView: redirect
    deactivate PlaylistView
    deactivate ViewPlaylistController
    activate LoginView

    LoginView -> "Guest/Listener": see the result of the interaction
    deactivate LoginView
    deactivate "Guest/Listener"
    
else Error: Authentication token invalid
    ViewPlaylistController -> AuthTokenRepository: get authentication token
    activate ViewPlaylistController
    activate "Guest/Listener"
    activate PlaylistView
    activate AuthTokenRepository
    return Some(authToken)
    deactivate AuthTokenRepository

    ViewPlaylistController -> ViewPlaylistInteractor: repackage & pass RequestModel\n(authToken, playlistId)
    deactivate ViewPlaylistController
    activate ViewPlaylistInteractor

    ViewPlaylistInteractor -> AuthTokenGenerator: verify authentication token
    activate AuthTokenGenerator
    return false
    deactivate AuthTokenGenerator

    ViewPlaylistInteractor ->> ViewPlaylistPresenter: pass ResponseModel\n(Err(AuthTokenInvalid))
    deactivate ViewPlaylistInteractor
    activate ViewPlaylistPresenter

    ViewPlaylistPresenter ->> PlaylistView: repackage & update ViewModel\n(Err(AuthTokenInvalid))
    deactivate ViewPlaylistPresenter

    PlaylistView -> LoginView: redirect
    deactivate PlaylistView
    activate LoginView

    LoginView -> "Guest/Listener": see the result of the interaction
    deactivate LoginView
    deactivate "Guest/Listener"
    newpage

else Error: Playlist not found
    ViewPlaylistController -> AuthTokenRepository: get authentication token
    activate ViewPlaylistController
    activate "Guest/Listener"
    activate PlaylistView
    activate AuthTokenRepository
    return Some(authToken)
    deactivate AuthTokenRepository

    ViewPlaylistController -> ViewPlaylistInteractor: repackage & pass RequestModel\n(authToken, playlistId)
    deactivate ViewPlaylistController
    activate ViewPlaylistInteractor

    ViewPlaylistInteractor -> AuthTokenGenerator: verify authentication token
    activate AuthTokenGenerator
    return true
    deactivate AuthTokenGenerator

    ViewPlaylistInteractor -> PlaylistRepository: get Playlist by ID\n(playlistId)
    activate PlaylistRepository
    return None
    deactivate PlaylistRepository

    ViewPlaylistInteractor ->> ViewPlaylistPresenter: pass ResponseModel\n(Err(PlaylistNotFound))
    deactivate ViewPlaylistInteractor
    activate ViewPlaylistPresenter

    ViewPlaylistPresenter ->> PlaylistView: repackage & update ViewModel\n(Err(PlaylistNotFound))
    deactivate ViewPlaylistPresenter

    PlaylistView -> "Guest/Listener": see the result of the interaction
    deactivate PlaylistView
    deactivate "Guest/Listener"

else Error: Playlist not visible to Listener
    ViewPlaylistController -> AuthTokenRepository: get authentication token
    activate AuthTokenRepository
    activate PlaylistView
    activate "Guest/Listener"
    return Some(authToken)
    deactivate AuthTokenRepository

    ViewPlaylistController -> ViewPlaylistInteractor: repackage & pass RequestModel\n(authToken, playlistId)
    deactivate ViewPlaylistController
    activate ViewPlaylistInteractor

    ViewPlaylistInteractor -> AuthTokenGenerator: verify authentication token
    activate AuthTokenGenerator
    return true
    deactivate AuthTokenGenerator

    par
    ViewPlaylistInteractor -> PlaylistRepository: get Playlist by ID\n(playlistId)
    activate PlaylistRepository
    return Some(playlist)
    activate Playlist
    deactivate PlaylistRepository

    else
    ViewPlaylistInteractor -> AuthTokenGenerator: get Listener ID from authentication token
    activate AuthTokenGenerator
    return listenerId
    deactivate AuthTokenGenerator

    end

    ViewPlaylistInteractor -> Playlist: check if Playlist is visible to Listener\n(listenerId)
    return false

    ViewPlaylistInteractor ->> ViewPlaylistPresenter: pass ResponseModel\n(Err(PlaylistNotVisible))
    deactivate ViewPlaylistInteractor
    deactivate Playlist
    activate ViewPlaylistPresenter

    ViewPlaylistPresenter ->> PlaylistView: repackage & update ViewModel\n(Err(PlaylistNotVisible))
    deactivate ViewPlaylistPresenter

    PlaylistView -> "Guest/Listener": see the result of the interaction
    deactivate PlaylistView
    deactivate "Guest/Listener"

end

@enduml
